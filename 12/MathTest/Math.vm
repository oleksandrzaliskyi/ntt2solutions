function Math.init 2
push constant 0
pop local 0
push constant 1
pop local 1
push constant 16
call Array.new 1
pop static 0
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push static 0
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
neg
return
label IF_FALSE0
push argument 0
return
function Math.multiply 7
push constant 0
pop local 5
push argument 0
pop local 3
push argument 1
pop local 4
push local 3
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push local 4
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push argument 0
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 0
neg
pop local 3
push local 5
not
pop local 5
label IF_FALSE2
push argument 1
push constant 0
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 1
neg
pop local 4
push local 5
not
pop local 5
label IF_FALSE3
push local 4
pop local 0
push constant 16
call Array.new 1
pop local 6
push constant 14
pop local 1
label WHILE_EXP0
push local 1
push constant 1
neg
gt
not
if-goto WHILE_END0
push local 1
push local 6
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push local 1
push static 0
add
pop pointer 1
push that 0
lt
not
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 1
push local 6
add
push constant 0
not
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push local 1
push static 0
add
pop pointer 1
push that 0
sub
pop local 0
label IF_FALSE4
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
push local 3
pop local 2
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push constant 16
lt
not
if-goto WHILE_END1
push local 1
push local 6
add
pop pointer 1
push that 0
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 0
push local 2
add
pop local 0
label IF_FALSE5
push local 2
push local 2
add
pop local 2
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 6
call Array.dispose 1
pop temp 0
push local 5
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 0
neg
pop local 0
label IF_FALSE6
push local 0
return
function Math.divide 4
push argument 0
pop local 0
push argument 1
pop local 1
push constant 0
pop local 3
push local 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
neg
pop local 0
push local 3
not
pop local 3
label IF_FALSE0
push local 1
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
neg
pop local 1
push local 3
not
pop local 3
label IF_FALSE1
push local 3
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 1
neg
push local 0
push local 1
call Math.divide 2
call Math.multiply 2
return
label IF_FALSE2
push local 1
push local 0
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
return
label IF_FALSE3
push constant 2
push local 1
call Math.multiply 2
push constant 0
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
return
label IF_FALSE4
push local 0
push constant 2
push local 1
call Math.multiply 2
call Math.divide 2
pop local 2
push local 0
push constant 2
push local 2
call Math.multiply 2
push local 1
call Math.multiply 2
sub
push local 1
lt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 2
push local 2
call Math.multiply 2
return
goto IF_END5
label IF_FALSE5
push constant 2
push local 2
call Math.multiply 2
push constant 1
add
return
label IF_END5
function Math.sqrt 3
push constant 256
pop local 2
push constant 0
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 2
push constant 1
gt
not
if-goto WHILE_END0
push local 2
push constant 2
call Math.divide 2
pop local 2
push local 0
push local 2
add
push local 0
push local 2
add
call Math.multiply 2
push argument 0
gt
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 2
add
pop local 0
push local 0
push constant 181
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push local 2
sub
pop local 0
label IF_FALSE1
label IF_FALSE0
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
label IF_FALSE0
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
label IF_FALSE0
push argument 1
return
