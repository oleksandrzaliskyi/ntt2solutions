// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      var int len;
      let len = maxLength;
      if (maxLength = 0){
        let len = 1;
      }
      let str = Memory.alloc(len);
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do Memory.deAlloc(this);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let str[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      let str[length] = c;
      let length = length + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let length = length - 1;
      return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      var int num, counter,len;
      var boolean neg;
      let neg = false;
      let counter = 0;
      let num = 0;
      let len = length();
      if (str[0] = 45){
        let neg = true;
        let counter = 1;
      }
      while((counter<length)&(str[counter]>47)&(str[counter]<58)){
        let num = num*10 + ((str[counter]-48));
        let counter = counter + 1;
      }
      if(neg){
        return (-1)*num;
      }
      return num;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var Array reversed;

      var boolean negative;
      var int ch, number, counter, quotient, remainder,reversedcounter ;

      let str = Array.new(6);
      let length = 0; //
      let number = val;
      let reversed = Array.new(6);
      let counter = 0;
      let reversedcounter = 0;
      let negative = false;

      if (val<0){
        let negative = true;
        let number = (-1)*number;
        do appendChar(45);
      }
      // fill up reversed array
      while(number>0){

        let quotient = number/10;
        let remainder = number - (quotient*10);
        let reversed[counter] = remainder;
        let counter = counter + 1;
        let number = number/10;
      }

      let reversedcounter = counter;
      while(reversedcounter>0){
        // decrement
        let reversedcounter = reversedcounter-1;

        let ch = reversed[reversedcounter]+48;

        do appendChar(ch);

      }
      return;

    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
