// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Circle/CircleGame.jack

/**
 * Implements the Cicle Dance game.
 * This simple game allows the user to move a black circle around
 * the screen, and change the circle's size during the movement.
 * When the game starts, a circle of 30 by 30 pixels is shown at the
 * top-left corner of the screen. The user controls the circle as follows.
 * The 4 arrow keys are used to move the circle up, down, left, and right.
 * The 'z' and 'x' keys are used, respectively, to decrement and increment
 * the circle's size. The 'q' key is used to quit the game.
 */

class CircleGame {
   field Circle circle; // the circle of this game
   field int direction; // the circle's current direction: 
                        // 0=none, 1=up, 2=down, 3=left, 4=right

   /** Constructs a new Circle Game. */
   constructor CircleGame new() {
      // Creates a circle with radius of 30 pixels and positions it at the top-left
      // of the screen.
      let circle = Circle.new(30, 30, 30);
      let direction = 0;  // initial state is no movement
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do circle.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the circle in the current direction. */
   method void moveCircle(int direction) {
      if (direction = 1) { do circle.moveUp(); }
      if (direction = 2) { do circle.moveDown(); }
      if (direction = 3) { do circle.moveLeft(); }
      if (direction = 4) { do circle.moveRight(); }
      do Sys.wait(20);  // delays the next movement (default: 5)
      return;
   }

   /** Runs the game: handles the user's inputs and moves the circle accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      
      while (~exit) {
         // waits for a key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
         }
         if (key = 81)  { let exit = true; }     // q key
         if (key = 90)  { do circle.decSize(); let key = 0; } // z key
         if (key = 88)  { do circle.incSize(); let key = 0; } // x key
         if (key = 87) { do moveCircle(1); let key = 0; }   // 'W' key (up)
         if (key = 83) { do moveCircle(2); let key = 0; }   // 'S' key (down)
         if (key = 65) { do moveCircle(3); let key = 0; }   // 'A' key (left)
         if (key = 68) { do moveCircle(4); let key = 0; }   // 'D' key (right)

         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
         }
     } // while
     return;
   }
}



